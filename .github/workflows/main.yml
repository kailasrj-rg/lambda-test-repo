name: Deploy Lambdas

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to observe'
        required: true
        default: 'main'
  push:
    branches:
      - main
    paths:
      - 'lambdas/**'

jobs:
  deploy_lambdas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Detect Modified Lambdas
        id: detect_changes
        run: |
          echo "Detecting modified Lambda folders..."

          # Check for shallow clone
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is in a shallow state. Fetching full history..."
            git fetch --unshallow || { echo "Failed to unshallow repository"; exit 1; }
          fi

          # Check for previous commit
          if git rev-parse --verify HEAD^ &>/dev/null; then
            echo "Fetching modified files since last commit."
            MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)
          else
            echo "No previous commit. Detecting all changes from the first commit."
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            MODIFIED_FILES=$(git diff --name-only $FIRST_COMMIT HEAD)
          fi

          echo "Modified files:"
          echo "$MODIFIED_FILES"

          # Check if any files were modified
          if [ -z "$MODIFIED_FILES" ]; then
            echo "No files were modified. Exiting."
            exit 0
          fi

          # Filter files for version.json
          VERSION_JSON_PATHS=$(echo "$MODIFIED_FILES" | grep '^lambdas/.*version\.json$' || true)
          echo "Paths with version.json files:"
          echo "$VERSION_JSON_PATHS"

          # Extract Lambda paths
          MODIFIED_LAMBDAS=$(echo "$VERSION_JSON_PATHS" | awk -F/ '{print $2 "/" $3}' | sort | uniq)
          echo "Modified Lambda folders:"
          echo "$MODIFIED_LAMBDAS"

          # Check if any Lambdas were modified
          if [ -z "$MODIFIED_LAMBDAS" ]; then
            echo "No modified Lambda folders found. Exiting."
            exit 0
          fi

          # Save to file
          echo "$MODIFIED_LAMBDAS" | sed '/^$/d' > modified_lambdas.txt
          echo "Contents of modified_lambdas.txt:"
          cat modified_lambdas.txt

          # Set output for next steps
          echo "::set-output name=modified::$MODIFIED_LAMBDAS"

      - name: Validate Modified Lambdas
        run: |
          echo "Validating modified Lambdas..."
          echo "Modified Lambdas Output: ${{ steps.detect_changes.outputs.modified }}"
          if [ ! -s modified_lambdas.txt ]; then
            echo "No modified Lambdas detected. Exiting."
            exit 0
          fi
          echo "Detected modified Lambdas:"
          cat modified_lambdas.txt

      - name: Deploy Modified Lambdas
        if: steps.detect_changes.outputs.modified != ''
        run: |
          echo "Starting deployment of modified Lambdas..."
          while IFS= read -r lambda_path; do
            if [ -z "$lambda_path" ]; then
              echo "Empty line detected. Skipping."
              continue
            fi

            # Extract Lambda name
            lambda=$(echo "$lambda_path" | awk -F/ '{print $3}')
            echo "Processing Lambda: $lambda (Path: $lambda_path)"

            # Validate Lambda folder existence
            if [ ! -d "lambdas/$lambda_path" ]; then
              echo "Folder 'lambdas/$lambda_path' does not exist. Skipping..."
              continue
            fi

            # Change directory to Lambda folder
            cd lambdas/$lambda_path

            # Install dependencies
            echo "Installing dependencies for $lambda..."
            npm ci --only=prod || { echo "Failed to install dependencies for $lambda"; exit 1; }

            # Create zips folder
            mkdir -p ../../zips
            echo "Creating deployment package for $lambda..."
            zip -r ../../zips/$lambda.zip . || { echo "Failed to create zip for $lambda"; exit 1; }
            echo "Package created: zips/$lambda.zip"

            # Deploy to AWS Lambda
            echo "Deploying $lambda to AWS Lambda..."
            aws lambda update-function-code \
              --function-name $lambda \
              --zip-file fileb://../../zips/$lambda.zip || { 
                echo "Failed to deploy $lambda. Check the logs.";
                exit 1;
              }

            echo "Successfully deployed $lambda."
            cd ../../..
          done < modified_lambdas.txt
